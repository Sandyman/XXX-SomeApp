
/* Loading spinner */
/* Single result item */
@keyframes rotator {
    from {
        transform: translateY(-50%) rotate(0deg);
    }
    to {
        transform: translateY(-50%) rotate(359deg);
    }
}

.autocomplete-input {
    width: 100%;
    box-sizing: border-box;
    position: relative;
    flex: 1;

    &:focus {
        outline: none;
    }
}

.autocomplete-input[aria-expanded="true"] {
    border-color: rgba(0, 0, 0, 0.12);
    background-color: #fff;
    outline: none;
    box-shadow: 0 2px 2px rgba(0, 0, 0, 0.16);
}

[data-position="below"] {
    .autocomplete-input[aria-expanded="true"] {
        border-bottom-color: transparent;
    }

    .autocomplete-result-list {
        top: 0;
        margin-top: -2px;
        border-top-color: transparent;
        padding-bottom: 0;
    }
}

[data-position="above"] {
    .autocomplete-input[aria-expanded="true"] {
        border-top-color: transparent;
        z-index: 2;
    }

    .autocomplete-result-list {
        bottom: 0;
        margin-bottom: -2px;
        border-bottom-color: transparent;
        padding-top: 0;
    }
}

.autocomplete[data-loading="true"] {
    &::after {
        content: "";
        border: 3px solid rgba(0, 0, 0, 0.12);
        border-right: 3px solid rgba(0, 0, 0, 0.48);
        border-radius: 100%;
        width: 20px;
        height: 20px;
        position: absolute;
        right: 12px;
        bottom: 0;
        transform: translateY(-25%);
        animation: rotator 1s infinite linear;
    }
}

.autocomplete-result-list {
    border: 1px solid rgba(0, 0, 0, 0.12);
    max-height: 150px;
    overflow-y: auto;
    background: #fff;
    display: flex;
    flex-direction: column;
    // No need to set list-style: none; since .list-group-item is block level
    padding-left: 0; // reset padding because ul and ol
    margin-bottom: 0;
    @include border-radius($list-group-border-radius);
}

.autocomplete-result {
    position: relative;
    display: block;
    padding: $list-group-item-padding-y $list-group-item-padding-x;
    color: $list-group-color;
    text-decoration: if($link-decoration == none, null, none);
    background-color: $list-group-bg;
    border: $list-group-border-width solid $list-group-border-color;

    &:first-child {
        @include border-top-radius(inherit);
    }

    &:last-child {
        @include border-bottom-radius(inherit);
    }

    &.disabled,
    &:disabled {
        color: $list-group-disabled-color;
        pointer-events: none;
        background-color: $list-group-disabled-bg;
    }

    // Include both here for `<a>`s and `<button>`s
    &.active {
        z-index: 2; // Place active items above their siblings for proper border styling
        color: $list-group-active-color;
        background-color: $list-group-active-bg;
        border-color: $list-group-active-border-color;
    }

    & + & {
        border-top-width: 0;

        &.active {
            margin-top: -$list-group-border-width;
            border-top-width: $list-group-border-width;
        }
    }

    &:hover {
        background-color: rgba(0, 0, 0, 0.06);
    }
}

.autocomplete-result[aria-selected="true"] {
    background-color: rgba(0, 0, 0, 0.06);
}
